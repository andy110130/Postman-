{
	"info": {
		"_postman_id": "be126293-2153-4c62-bdfd-e5ef1f0065a1",
		"name": "Postman HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19836051"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Спарсить response body в json.",
							"let  responseData = pm.response.json();",
							"console.log(responseData)",
							"",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)",
							"let responseName = responseData.name",
							"console.log(\"responseName =\",responseName)",
							"pm.test(\"Request_Name == Response_Name\", function () {",
							"    pm.expect(responseName).to.eql(\"andy\")",
							"}",
							")",
							"",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)",
							"let responseAge = responseData.age",
							"console.log(\"responseAge =\",responseAge)",
							"pm.test(\"Request_Age == Response_Age\", function () {",
							"    pm.expect(responseAge).to.eql(\"30\")",
							"})",
							"",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"let responseSalary = responseData.salary",
							"console.log(\"responseSalary =\",responseSalary)",
							"pm.test(\"Request_Salary == Response_Salary\", function () {",
							"    pm.expect(responseSalary).to.eql(500)",
							"})",
							"",
							"// Спарсить request.",
							"let req = request.data",
							"console.log(req)",
							"",
							"// роверить, что name в ответе равно name из request (name забрать из request.)",
							"let reqName = req.name",
							"console.log(\"reqName =\",reqName)",
							"console.log(\"responseName =\",responseName)",
							"pm.test(\"ReqName(parse) == Response_Name\", function () {",
							"    pm.expect(reqName).to.eql(responseName)",
							"}",
							")",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let reqAge = req.age",
							"console.log(\"reqAge =\", reqAge)",
							"console.log(\"responseAge =\", responseAge )",
							"pm.test(\"reqAge(parse) == Response_Age\", function () {",
							"    pm.expect(reqAge).to.eql(responseAge)",
							"})",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let reqSalary = req.salary * 1",
							"console.log(\"reqSalary =\", reqSalary)",
							"console.log(\"responseSalary =\", responseSalary)",
							"pm.test(\"reqSalary(parse) == Response_Salary\", function () {",
							"    pm.expect(reqSalary).to.eql(responseSalary)",
							"})",
							"",
							"//  Вывести в консоль параметр family из response.",
							"let resFamily = responseData.family",
							"console.log(resFamily)",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let reqSalaryX4 = reqSalary * 4 ",
							"let u_salary_1_5_year = responseData.family.u_salary_1_5_year",
							"console.log(\"reqSalaryX4 =\", reqSalaryX4)",
							"console.log(\"u_salary_1_5_year =\", u_salary_1_5_year)",
							"pm.test(\"reqSalaryX4 == u_salary_1_5_year\", function (){",
							"    pm.expect(reqSalaryX4).to.eql(u_salary_1_5_year)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос ",
							"// 2.Статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3.Спарсить response body в json.",
							"let responseData = pm.response.json()",
							"console.log(responseData)",
							"",
							"// 4.Спарсить request.",
							"let reqName = pm.request.url.query.get(\"name\")",
							"let reqAge = pm.request.url.query.get(\"age\")",
							"let reqSalary = (pm.request.url.query.get(\"salary\"))*1",
							"console.log(reqName, reqAge, reqSalary)",
							"",
							"// 5.Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resName = responseData.name",
							"console.log(\"reqName =\",reqName, \"resName =\",resName)",
							"pm.test(\"reqName == resName\", function (){",
							"    pm.expect(reqName).to.eql(resName)",
							"})",
							"",
							"// 6.Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let resAge = responseData.age",
							"console.log( \"reqAge=\",reqAge,\"resAge=\",resAge)",
							"pm.test(\"reqAge == resAge\", function () {",
							"    pm.expect(reqAge).to.eql(resAge)",
							"})",
							"",
							"// 7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let resSalary = responseData.salary ",
							"console.log(\"reqSalary=\", reqSalary,\"resSalary=\",resSalary)",
							"pm.test(\"reqSalary == resSalary\", function () {",
							"    pm.expect(reqSalary).to.eql(resSalary)",
							"})",
							"",
							"// 8.Вывести в консоль параметр family из response.",
							"let resFamily = responseData.family",
							"console.log(resFamily)",
							"",
							"// 9.Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"dog has a name\", function(){",
							"",
							"pm.expect(responseData.family.pets.dog).to.have.property(\"name\")})",
							"",
							"",
							"// 10.Проверить, что у параметра dog есть параметры age.",
							"",
							" pm.test(\"dog has a age\", function(){",
							"",
							"pm.expect(responseData.family.pets.dog).to.have.property(\"age\")})   ",
							"",
							"",
							"//  11.Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"dog name is Luky\", function(){",
							"",
							"pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\")})   ",
							"",
							"// 12.Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Luky is 4 years old\", () => pm.expect(responseData.family.pets.dog.age).to.eql(4))",
							"",
							"// 13.Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)",
							"let req_name = pm.request.url.query.get(\"name\")",
							"",
							"let req_age = +pm.request.url.query.get(\"age\")",
							"",
							"let req_salary = +pm.request.url.query.get(\"salary\")",
							"",
							"console.log(req_name)",
							"console.log(req_age)",
							"console.log(req_salary)",
							"",
							"const req_object = {",
							" name : req_name,",
							" age : req_age, ",
							" salary : req_salary",
							"}",
							"console.log(req_object)",
							"",
							"let res_age = +pm.response.json().age",
							"let res_name = pm.response.json().name",
							"let res_salary = +pm.response.json().salary ",
							"",
							"const res_object = {",
							"    name : res_name,",
							"    age : res_age, ",
							"    salary : res_salary",
							"}",
							" console.log(res_object)",
							"",
							" pm.test('req_object == res_object', function(){",
							"pm.expect(res_object).to.deep.eql(req_object)",
							" }",
							"     ",
							" )",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос",
							"// 2.Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3.Спарсить response body в json.",
							"let responseData = pm.response.json()",
							"console.log(responseData)",
							"",
							"// 4.Спарсить request.",
							"let reqName = pm.request.url.query.get(\"name\")",
							"let reqAge = pm.request.url.query.get(\"age\")*1",
							"let reqSalary = (pm.request.url.query.get(\"salary\"))*1",
							"console.log(reqName, reqAge, reqSalary)",
							"",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let resName = responseData.name ",
							"console.log(\"reqName=\",reqName,\"resName=\",resName)",
							"pm.test(\"reqName == resName\", () => pm.expect(reqName).to.eql(resName))",
							"",
							"// 6.Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let resAge = responseData.age",
							"console.log(\"reqName=\",reqAge,\"resName=\",resAge)",
							"pm.test(\"reqAge == resAge\",() => pm.expect(reqAge).to.eql(resAge))",
							"",
							"// 7.Вывести в консоль параметр salary из request.",
							"console.log(reqSalary)",
							"",
							"// 8.Вывести в консоль параметр salary из response.",
							"console.log(responseData.salary)",
							"",
							"// 9.Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(responseData.salary[0])",
							"",
							"// 10.Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(responseData.salary[1])",
							"",
							"// 11.Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(responseData.salary[2])",
							"",
							"// 12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"[0] salary value == request salary\", () => pm.expect(responseData.salary[0]).to.eql(reqSalary))",
							"",
							"// 13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let salaryx2 = reqSalary*2",
							"let salary1 = responseData.salary[1]*1",
							"pm.test(\"[1] salary value == request salary * 2\", () => pm.expect(salary1).to.eql(salaryx2))",
							"",
							"// 14.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let salaryx3 = reqSalary*3",
							"let salary2 = responseData.salary[2]*1",
							"pm.test(\"[2] salary value == request salary * 3\", ()=> pm.expect(salary2).to.eql(salaryx3))",
							"",
							"// 15.Создать в окружении переменную name",
							"postman.setEnvironmentVariable(\"name\")",
							"",
							"// 16.Создать в окружении переменную age",
							"postman.setEnvironmentVariable(\"age\")",
							"",
							"//  17.Создать в окружении переменную salary",
							"postman.setEnvironmentVariable(\"salary\")",
							"",
							"// 18.Передать в окружение переменную name",
							"postman.setEnvironmentVariable(\"name\", responseData.name)",
							"",
							"// 19.Передать в окружение переменную age",
							"postman.setEnvironmentVariable(\"age\", responseData.age)",
							"",
							"// 20.Передать в окружение переменную salary",
							"postman.setEnvironmentVariable(\"salary\", responseData.salary[0])",
							"",
							"// 21.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"const salaryArr = responseData.salary",
							"for (let i = 0; i < salaryArr.length; i += 1) {",
							"  console.log(salaryArr[i]);",
							"}",
							"",
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary",
							"let req_salary = pm.request.url.query.get(\"salary\")",
							"console.log(req_salary)",
							"",
							"let resp_salary = pm.response.json().salary",
							"console.log(resp_salary)",
							"",
							"for(let i=0; i<=resp_salary.length-1; i++){",
							"pm.test(`req_salary*${i+1} ${req_salary} == resp_salary ${resp_salary[i]}`, function(){",
							"    pm.expect(+req_salary*(i+1)).to.eql(+resp_salary[i])",
							"    console.log(+req_salary*(i+1))",
							"})",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"let responseData = pm.response.json();",
							"console.log(responseData)",
							"",
							"// 7. Спарсить request.",
							"let requestData = request.data",
							"console.log(requestData)",
							"",
							"// 8.Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"check qa salary in response\", () => pm.expect(responseData).to.have.property(\"start_qa_salary\"))",
							"",
							"// 9.Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"check qa_salary_after_6_months\", () => pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\"))",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"check qa_salary_after_12_months\", () => pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\"))",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"check qa_salary_after_1.5_year\", () => pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\"))",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"check qa_salary_after_3.5_years\", () => pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\"))",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"check qa salary in response\", () => pm.expect(responseData).to.have.property(\"person\"))",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary*1 == start_qa_salary\", () => pm.expect(requestData.salary*1).to.eql(responseData.start_qa_salary))",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salary*2 == qa_salary_after_6_months\", () => pm.expect(requestData.salary*2).to.eql(responseData.qa_salary_after_6_months))",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"salary*2.7 == qa_salary_after_12_months\", () => pm.expect(requestData.salary*2.7).to.eql(responseData.qa_salary_after_12_months))",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"salary*3.3 == qa_salary_after_1.5_year\", () => pm.expect(requestData.salary*3.3).to.eql(responseData[\"qa_salary_after_1.5_year\"]))",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"salary*3.8 == qa_salary_after_3.5_years\", () => pm.expect(requestData.salary*3.8).to.eql(responseData[\"qa_salary_after_3.5_years\"]))",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"u_name[1] == salary\", ()=> pm.expect(requestData.salary*1).to.eql(responseData.person.u_name[1]))",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age == age\", () => pm.expect(requestData.name).to.eql(responseData.person.u_name[0]))",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test('u_salary_5_years == salary*4.2', () => pm.expect(requestData.salary*4.2).to.eql(responseData.person[\"u_salary_5_years\"]))",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let data1 = responseData.person",
							" ",
							"for (let key in data1) {",
							"\tconsole.log(key + ': ' + data[key]);",
							"}",
							"// * Преобразовать Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных.",
							"",
							"let arr = []",
							"for(const key in pm.responce.json()){",
							"    arr.push(key)",
							"}",
							"arr.forEach((e) => {",
							"    pm.test(`responce has a ${e}`, function(){",
							"        pm.expect(pm.responce.json().to.have.property(e))",
							"    } )",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}